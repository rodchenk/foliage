в нашей апи в модуле аутентификации мы реализовали три гланых команды:
	auth/login
	auth/prolongate
	auth/logout

после успешной аутентификаци пользователь получает три главных значения:
	access_token
	refresh_token
	expires_at
	(необходимые приватные данные)

изначально токен выдается на 300ms, после чего может быть продлен вызовом auth/prolongate
это обеспечивает дополнительную защиту в случае подмены данных и токена злоумышленником.
таким образом токен проедлевается еще на 14 суток.
refresh_token служит для автоматического продлена основного токена после его исхода.

таким образом мы имплементируем отдельный независимый модуль авторизации, который может быть
использован как нащим сервисом, так и другими сервисами.

клиенское приложение регестрируется на сервере, где получает свой уникальный app_id, после этого указываются
защищенный данные которые клиенское приложение собирается получать от сервера приложения. 

пользователь нажимает на кнопку, кнопка выполняет редирект
Schritt 1
api.foliage.com/auth/login/?app_id=<app_id>&redirect_uri=<redirect_uri>
Schritt 2
страница авторизации нашего сервиса foliage.com/login?

ползователь оказыается на странице фолиэйдж, где выполняет вход со своими учетными данными.
после этого фолиэйдж выполняет запрос к своей библиотеке авторизации, которая в свою очередь 
вызывает метод АПИ auth/login?grant_type=password&name=<name>&password=<password>. В успешном случае этот вызов 
возвращает json
{
	"status" : 			true,
	"access_token" : 	<access_token>,
	"expires_at" : 		86400, //sutki
	"refresh_token" : 	<refresh_token>,
	"user" : {
		"name" : 	<name>,
		"photo" : 	<photo>
		...
	}
}
в отрицательном случае возвращается объект следующего вида:
{
	"status" : 		false,
	"error" : 		<error_code>,
	"description" : <description>
}
данный объект возврщет АПИ скрипту авторизации foliage. Скрипт перенаправляет пользователя на:

<redirect_uri>/?access_token=<access_token>&refresh_token=<refresh_token>&expires_at=86400&name=<name>&photo=<photo_url>

клиентское приложение вносит в бд токен и другие необходимые данные, создает куки.

auth/login?grant_type=access_token&refresh_token=<refresh_token>
{
	"status" : true,
	"access_token" : <access_token>,
	"refresh_token" : <refresh_token>
}

этот процесс дает следующие приемущества:

главный модуль авторизации имеет сведения, какой юзер в каком приложении авторизирован и дает возможность выполнить выход со всех приложений или с конкретных. 

UPDATE table SET refresh_token = NULL, access_token = NULL WHERE user_id = 478;
таким образом токен станет недействительным и при следующем входе пользователь будет вынужден авторизироваться заново.

app_id	|	user_id	|	access_token	|	expires_at	|	refresh_token
-------------------------------------------------------------------------
31		|	478		|	jskb884sdc		|	12:00:00	|	sc8743lncwe_3
42		|	478		|	pdkv7_ewn3		|	10:00:30	|	jdj39fjgbt4uJ

как часто приложение может запрашивать достоверность токена? - в случае если мы стираем токен для выхода
как работает реферш токен?
	после очередного входа пользователя сверяется актуальная дата с датой выхода токена, если токен больше недействителен (date() > expires_at), 
	выполняется либо новый запрос авторизации, либо автоматический запрос нового токена с помощью рефреш токена.
	auth/login?grant_type=access_token&refresh_token=<refresh_token>
	если пользователь произвел

как сапоставить юзера после авторизации и после новой авторизации?
	мы даем пользователю уникальное имя/id, но как споставить это с информацией которую вернет API?
